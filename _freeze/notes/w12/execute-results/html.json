{
  "hash": "5cf16a922b6d5aaf5f18c95cf0998bb0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture Note Week 12\"\nfilters: \n  - webr\nexecute: \n  echo: false\n---\n\n\n\n\n\n::: callout-note\nLearning Objective:\n\nLO1: Evaluate out-of-sample predictive performance of a model.\n\nLO2: Compute and interpret performance measures for classification methods.\n\nLO3: Describe and apply logistic regression.\n\nLO4: Describe and apply classification trees.\n:::\n\n\n\n\n\n\n\n\n\n\n\n### 1. Introduction to\n\nEvaluating the out-of-sample predictive performance of a model is crucial in determining its generalizability to new, unseen data. Two common methods for this evaluation are the static holdout method and k-fold cross-validation. This lecture note will cover both methods, their implementation, advantages, and limitations.\n\n### 2. Static Holdout Method\n\n#### 2.1. Concept\n\nThe static holdout method involves splitting the dataset into two distinct sets:\n\n-   **Training Set:** Used to train the model.\n\n-   **Testing (Holdout) Set:** Used to evaluate the model’s performance on unseen data.\n\n#### 2.2. Implementation\n\n1.  **Split the Dataset:**\n\n    -   Typically, a common split ratio is 70-80% for training and 20-30% for testing.\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    `# Assuming data is in a data frame df and target variable is y set.seed(42) sample <- sample.int(n = nrow(df), size = floor(.8*nrow(df)), replace = F) train <- df[sample, ] test <- df[-sample, ]`\n\n2.  **Train the Model:**\n\n    -   Fit the model on the training data.\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    `# Assuming using a linear model model <- lm(y ~ ., data = train)`\n\n3.  **Evaluate the Model:**\n\n    -   Predict on the test data and evaluate performance.\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    `predictions <- predict(model, newdata = test) actuals <- test$y mse <- mean((predictions - actuals)^2)  # Mean Squared Error`\n\n#### 2.3. Advantages and Limitations\n\n-   **Advantages:**\n\n    -   Simple to implement and understand.\n\n    -   Computationally efficient.\n\n-   **Limitations:**\n\n    -   Performance estimate can be highly dependent on the particular train-test split.\n\n    -   Not ideal for small datasets.\n\n### 3. K-Fold Cross-Validation\n\n#### 3.1. Concept\n\nK-fold cross-validation involves splitting the dataset into `k` equally sized folds. The model is trained `k` times, each time using `k-1` folds for training and the remaining fold for testing. The average performance across all `k` iterations is then used as the final performance estimate.\n\n#### 3.2. Implementation\n\n1.  **Split the Dataset into K Folds:**\n\n    -   Typically, `k` is set to 5 or 10.\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    `library(caret) set.seed(42) folds <- createFolds(df$y, k = 5, list = TRUE)`\n\n2.  **Train and Evaluate the Model:**\n\n    -   Iterate over each fold, train the model on `k-1` folds and evaluate on the remaining fold.\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    \\`results \\<- lapply(folds, function(fold) { train \\<- df\\[-fold, \\] test \\<- df\\[fold, \\]\n\n    model \\<- lm(y \\~ ., data = train) predictions \\<- predict(model, newdata = test) actuals \\<- test\\$y mse \\<- mean((predictions - actuals)\\^2) return(mse) })\n\n    mean_mse \\<- mean(unlist(results)) \\# Average Mean Squared Error\\`\n\n#### 3.3. Advantages and Limitations\n\n-   **Advantages:**\n\n    -   More reliable performance estimate as it reduces variability due to data splitting.\n\n    -   Utilizes the entire dataset for both training and testing, ensuring no data is wasted.\n\n-   **Limitations:**\n\n    -   More computationally intensive due to multiple training iterations.\n\n    -   Not as simple as the static holdout method.\n\n### 4. Conclusion\n\nBoth the static holdout method and k-fold cross-validation are essential tools for evaluating the out-of-sample predictive performance of a model. The static holdout method is simpler and faster, suitable for large datasets. In contrast, k-fold cross-validation provides a more robust performance estimate, especially valuable for small to medium-sized datasets. Understanding and correctly implementing these methods will enhance the reliability of your model's performance assessment.\n\n## Lecture Notes: Computing and Interpreting Performance Measures for Classification Methods\n\n### 1. Introduction\n\nEvaluating the performance of classification models is crucial for understanding their effectiveness in predicting categorical outcomes. This lecture note covers key performance measures, their computation, and interpretation for classification methods.\n\n### 2. Key Performance Measures\n\n#### 2.1. Confusion Matrix\n\nA confusion matrix is a table that summarizes the performance of a classification model by comparing the actual and predicted classifications.\n\n-   **True Positive (TP):** Correctly predicted positive cases.\n\n-   **True Negative (TN):** Correctly predicted negative cases.\n\n-   **False Positive (FP):** Incorrectly predicted positive cases (Type I error).\n\n-   **False Negative (FN):** Incorrectly predicted negative cases (Type II error).\n\n#### 2.2. Accuracy\n\nAccuracy measures the proportion of correct predictions (both true positives and true negatives) among the total number of cases.\n\nAccuracy=TP+TNTP+TN+FP+FN\\text{Accuracy} = \\frac{TP + TN}{TP + TN + FP + FN}Accuracy=TP+TN+FP+FNTP+TN​\n\n```         \nr\n```\n\nCopy code\n\n`accuracy <- (TP + TN) / (TP + TN + FP + FN)`\n\n#### 2.3. Precision\n\nPrecision (also called Positive Predictive Value) measures the proportion of true positive predictions among all positive predictions.\n\nPrecision=TPTP+FP\\text{Precision} = \\frac{TP}{TP + FP}Precision=TP+FPTP​\n\n```         \nr\n```\n\nCopy code\n\n`precision <- TP / (TP + FP)`\n\n#### 2.4. Recall\n\nRecall (also called Sensitivity or True Positive Rate) measures the proportion of true positive cases among all actual positive cases.\n\nRecall=TPTP+FN\\text{Recall} = \\frac{TP}{TP + FN}Recall=TP+FNTP​\n\n```         \nr\n```\n\nCopy code\n\n`recall <- TP / (TP + FN)`\n\n#### 2.5. F1 Score\n\nThe F1 Score is the harmonic mean of precision and recall, providing a balance between the two.\n\nF1 Score=2⋅Precision⋅RecallPrecision+Recall\\text{F1 Score} = 2 \\cdot \\frac{\\text{Precision} \\cdot \\text{Recall}}{\\text{Precision} + \\text{Recall}}F1 Score=2⋅Precision+RecallPrecision⋅Recall​\n\n```         \nr\n```\n\nCopy code\n\n`f1_score <- 2 * (precision * recall) / (precision + recall)`\n\n#### 2.6. Specificity\n\nSpecificity (also called True Negative Rate) measures the proportion of true negative cases among all actual negative cases.\n\nSpecificity=TNTN+FP\\text{Specificity} = \\frac{TN}{TN + FP}Specificity=TN+FPTN​\n\n```         \nr\n```\n\nCopy code\n\n`specificity <- TN / (TN + FP)`\n\n### 3. Implementation in R\n\nAssuming you have a binary classification model and a dataset with actual and predicted values, here's how to compute these performance measures in R.\n\n1.  **Generate Predictions:**\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    `# Example using a logistic regression model model <- glm(y ~ ., data = train, family = binomial) predictions <- predict(model, newdata = test, type = \"response\") predicted_classes <- ifelse(predictions > 0.5, 1, 0)`\n\n2.  **Create a Confusion Matrix:**\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    `library(caret) confusion_matrix <- confusionMatrix(as.factor(predicted_classes), as.factor(test$y))`\n\n3.  **Extract Performance Measures:**\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    \\`confusion \\<- confusion_matrix\\$table TP \\<- confusion\\[2, 2\\] TN \\<- confusion\\[1, 1\\] FP \\<- confusion\\[1, 2\\] FN \\<- confusion\\[2, 1\\]\n\n    accuracy \\<- (TP + TN) / (TP + TN + FP + FN) precision \\<- TP / (TP + FP) recall \\<- TP / (TP + FN) f1_score \\<- 2 \\* (precision \\* recall) / (precision + recall) specificity \\<- TN / (TN + FP)\\`\n\n### 4. Interpretation\n\n-   **Accuracy:** High accuracy indicates that the model correctly classifies most cases. However, it may be misleading if the classes are imbalanced.\n\n-   **Precision:** High precision means that when the model predicts a positive case, it is usually correct. It is important when the cost of false positives is high.\n\n-   **Recall:** High recall means that the model can identify most actual positive cases. It is important when the cost of false negatives is high.\n\n-   **F1 Score:** A balanced measure that is useful when you need to balance precision and recall.\n\n-   **Specificity:** High specificity means that the model can identify most actual negative cases. It is important when the cost of false positives is high.\n\n### 5. Conclusion\n\nUnderstanding and correctly interpreting performance measures are essential for evaluating the effectiveness of classification models. Each measure provides unique insights, and the choice of which to prioritize depends on the specific context and costs associated with false positives and false negatives.\n\n## Logistic Regression\n\n### 1. Introduction\n\nLogistic regression is a powerful statistical method used for binary classification problems. It is widely applied to scenarios where the outcome variable is binary (e.g., yes/no, success/failure). This lecture note will describe the logistic regression model and demonstrate its application using examples inspired by the \"Business Analytics\" book by Jeffrey D. Camm and others.\n\n### 2. Logistic Regression Model\n\n#### 2.1. Concept\n\nLogistic regression models the probability of a binary outcome using a logistic function. Unlike linear regression, which predicts continuous outcomes, logistic regression predicts the probability that a given input point belongs to a particular class.\n\nThe logistic function (also known as the sigmoid function) is defined as:\n\nP(Y=1∣X)=11+e−(β0+β1X1+β2X2+…+βkXk)P(Y=1\\|X) = \\frac{1}{1 + e^{-(\\beta_0 + \\beta_1X_1 + \\beta_2X_2 + \\ldots + \\beta_kX_k)}}P(Y=1∣X)=1+e−(β0​+β1​X1​+β2​X2​+…+βk​Xk​)1​\n\nWhere:\n\n-   P(Y=1∣X)P(Y=1\\|X)P(Y=1∣X) is the probability that the outcome YYY is 1 given the input XXX.\n\n-   β0,β1,…,βk\\beta\\_0, \\beta\\_1, \\ldots, \\beta\\_kβ0​,β1​,…,βk​ are the coefficients of the model.\n\n#### 2.2. Odds and Logit\n\n-   **Odds:** The odds of an event are the ratio of the probability of the event occurring to the probability of it not occurring.\n\nOdds=P(Y=1∣X)1−P(Y=1∣X)\\text{Odds} = \\frac{P(Y=1|X)}{1 - P(Y=1|X)}Odds=1−P(Y=1∣X)P(Y=1∣X)​\n\n-   **Logit:** The logit function is the natural logarithm of the odds.\n\nLogit(P)=log⁡(P1−P)=β0+β1X1+β2X2+…+βkXk\\text{Logit}(P) = \\log\\left(\\frac{P}{1-P}\\right) = \\beta\\_0 + \\beta\\_1X_1 + \\beta\\_2X_2 + \\ldots + \\beta\\_kX_kLogit(P)=log(1−PP​)=β0​+β1​X1​+β2​X2​+…+βk​Xk​\n\n### 3. Applying Logistic Regression in R\n\n#### 3.1. Data Preparation\n\n1.  **Load the Data:**\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    `# Example dataset data <- read.csv(\"path_to_dataset.csv\")`\n\n2.  **Split the Data into Training and Testing Sets:**\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    `set.seed(123) sample <- sample.int(n = nrow(data), size = floor(0.8*nrow(data)), replace = FALSE) train <- data[sample, ] test <- data[-sample, ]`\n\n#### 3.2. Model Training\n\n1.  **Fit the Logistic Regression Model:**\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    `model <- glm(binary_outcome ~ ., data = train, family = binomial)`\n\n2.  **View Model Summary:**\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    `summary(model)`\n\n#### 3.3. Model Evaluation\n\n1.  **Make Predictions:**\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    `predictions <- predict(model, newdata = test, type = \"response\") predicted_classes <- ifelse(predictions > 0.5, 1, 0)`\n\n2.  **Create a Confusion Matrix:**\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    `library(caret) confusion_matrix <- confusionMatrix(as.factor(predicted_classes), as.factor(test$binary_outcome)) print(confusion_matrix)`\n\n3.  **Calculate Performance Metrics:**\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    \\`confusion \\<- confusion_matrix\\$table TP \\<- confusion\\[2, 2\\] TN \\<- confusion\\[1, 1\\] FP \\<- confusion\\[1, 2\\] FN \\<- confusion\\[2, 1\\]\n\n    accuracy \\<- (TP + TN) / (TP + TN + FP + FN) precision \\<- TP / (TP + FP) recall \\<- TP / (TP + FN) f1_score \\<- 2 \\* (precision \\* recall) / (precision + recall) specificity \\<- TN / (TN + FP)\n\n    cat(\"Accuracy:\", accuracy, \"\\n\") cat(\"Precision:\", precision, \"\\n\") cat(\"Recall:\", recall, \"\\n\") cat(\"F1 Score:\", f1_score, \"\\n\") cat(\"Specificity:\", specificity, \"\\n\")\\`\n\n### 4. Interpretation\n\n-   **Coefficients:** The coefficients (β values) in the logistic regression model indicate the change in the log odds of the outcome for a one-unit increase in the predictor variable.\n\n-   **Odds Ratio:** The exponentiated coefficients (e\\^β) represent the odds ratio, showing how the odds of the outcome change with a one-unit increase in the predictor.\n\n-   **Performance Metrics:** The confusion matrix and derived metrics (accuracy, precision, recall, F1 score, specificity) help evaluate the model's performance on the test data.\n\n#### 5.1. Example Scenario: Predicting Customer Churn\n\n-   **Dataset:** Customer data with features like age, account length, service usage, etc.\n\n-   **Binary Outcome:** Whether the customer churned (1) or not (0).\n\n```         \nr\n```\n\nCopy code\n\n\\`# Example code based on a hypothetical dataset data \\<- read.csv(\"customer_churn.csv\") set.seed(123) sample \\<- sample.int(n = nrow(data), size = floor(0.8\\*nrow(data)), replace = FALSE) train \\<- data\\[sample, \\] test \\<- data\\[-sample, \\]\n\n# Fit logistic regression model\n\nmodel \\<- glm(churn \\~ age + account_length + service_usage, data = train, family = binomial)\n\n# Summary of the model\n\nsummary(model)\n\n# Predictions\n\npredictions \\<- predict(model, newdata = test, type = \"response\") predicted_classes \\<- ifelse(predictions \\> 0.5, 1, 0)\n\n# Confusion matrix\n\nlibrary(caret) confusion_matrix \\<- confusionMatrix(as.factor(predicted_classes), as.factor(test\\$churn)) print(confusion_matrix)\n\n# Performance metrics\n\nconfusion \\<- confusion_matrix\\$table TP \\<- confusion\\[2, 2\\] TN \\<- confusion\\[1, 1\\] FP \\<- confusion\\[1, 2\\] FN \\<- confusion\\[2, 1\\]\n\naccuracy \\<- (TP + TN) / (TP + TN + FP + FN) precision \\<- TP / (TP + FP) recall \\<- TP / (TP + FN) f1_score \\<- 2 \\* (precision \\* recall) / (precision + recall) specificity \\<- TN / (TN + FP)\n\ncat(\"Accuracy:\", accuracy, \"\\n\") cat(\"Precision:\", precision, \"\\n\") cat(\"Recall:\", recall, \"\\n\") cat(\"F1 Score:\", f1_score, \"\\n\") cat(\"Specificity:\", specificity, \"\\n\")\\`\n\n### 6. Conclusion\n\nLogistic regression is a fundamental tool for binary classification problems. Understanding how to apply and interpret logistic regression models is essential for making informed business decisions. By using the examples and techniques from the \"Business Analytics\" book, you can effectively implement logistic regression in your data analysis projects.\n\n### . Introduction\n\nA classification tree is a decision tree that is used to classify observations into categories. It is a non-parametric method that splits the data into subsets based on the value of input features, leading to a tree structure where each node represents a decision rule and each leaf represents a class label. This lecture note will describe the classification tree model and demonstrate its application using examples inspired by the \"Business Analytics\" book by Jeffrey D. Camm and others.\n\n### 2. Classification Tree Model\n\n#### 2.1. Concept\n\nA classification tree is built by recursively partitioning the dataset into subsets based on the value of input features. The objective is to create subsets that are as homogeneous as possible concerning the target variable.\n\n#### 2.2. Tree Structure\n\n-   **Root Node:** The topmost node representing the entire dataset.\n\n-   **Internal Nodes:** Nodes that split into further nodes based on a decision rule.\n\n-   **Leaf Nodes:** Terminal nodes that represent the final class label.\n\n#### 2.3. Splitting Criteria\n\nCommon criteria for splitting nodes include:\n\n-   **Gini Index:** Measures impurity. Lower values indicate more homogeneous nodes.\n\n-   **Entropy:** Measures disorder. Lower values indicate more homogeneous nodes.\n\n-   **Misclassification Error:** Measures the frequency of incorrect classifications.\n\n### 3. Applying Classification Trees in R\n\n#### 3.1. Data Preparation\n\n1.  **Load the Data:**\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    `# Example dataset data <- read.csv(\"path_to_dataset.csv\")`\n\n2.  **Split the Data into Training and Testing Sets:**\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    `set.seed(123) sample <- sample.int(n = nrow(data), size = floor(0.8*nrow(data)), replace = FALSE) train <- data[sample, ] test <- data[-sample, ]`\n\n#### 3.2. Model Training\n\n1.  **Fit the Classification Tree:**\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    `library(rpart) model <- rpart(binary_outcome ~ ., data = train, method = \"class\")`\n\n2.  **View the Tree:**\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    `library(rpart.plot) rpart.plot(model)`\n\n#### 3.3. Model Evaluation\n\n1.  **Make Predictions:**\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    `predictions <- predict(model, newdata = test, type = \"class\")`\n\n2.  **Create a Confusion Matrix:**\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    `library(caret) confusion_matrix <- confusionMatrix(predictions, as.factor(test$binary_outcome)) print(confusion_matrix)`\n\n3.  **Calculate Performance Metrics:**\n\n    ```         \n    r\n    ```\n\n    Copy code\n\n    \\`confusion \\<- confusion_matrix\\$table TP \\<- confusion\\[2, 2\\] TN \\<- confusion\\[1, 1\\] FP \\<- confusion\\[1, 2\\] FN \\<- confusion\\[2, 1\\]\n\n    accuracy \\<- (TP + TN) / (TP + TN + FP + FN) precision \\<- TP / (TP + FP) recall \\<- TP / (TP + FN) f1_score \\<- 2 \\* (precision \\* recall) / (precision + recall) specificity \\<- TN / (TN + FP)\n\n    cat(\"Accuracy:\", accuracy, \"\\n\") cat(\"Precision:\", precision, \"\\n\") cat(\"Recall:\", recall, \"\\n\") cat(\"F1 Score:\", f1_score, \"\\n\") cat(\"Specificity:\", specificity, \"\\n\")\\`\n\n### 4. Interpretation\n\n-   **Tree Structure:** The tree diagram provides a visual representation of the decision rules used to classify observations.\n\n-   **Decision Rules:** Each internal node represents a decision rule based on a feature and a threshold value.\n\n-   **Performance Metrics:** The confusion matrix and derived metrics (accuracy, precision, recall, F1 score, specificity) help evaluate the model's performance on the test data.\n\n### 5. Example from \"Business Analytics\"\n\nIn \"Business Analytics\" by Jeffrey D. Camm and others, classification trees are often applied to real-world business problems, such as customer segmentation, fraud detection, or risk assessment.\n\n#### 5.1. Example Scenario: Predicting Customer Churn\n\n-   **Dataset:** Customer data with features like age, account length, service usage, etc.\n\n-   **Binary Outcome:** Whether the customer churned (1) or not (0).\n\n```         \nr\n```\n\nCopy code\n\n\\`# Example code based on a hypothetical dataset data \\<- read.csv(\"customer_churn.csv\") set.seed(123) sample \\<- sample.int(n = nrow(data), size = floor(0.8\\*nrow(data)), replace = FALSE) train \\<- data\\[sample, \\] test \\<- data\\[-sample, \\]\n\n# Fit classification tree\n\nlibrary(rpart) model \\<- rpart(churn \\~ age + account_length + service_usage, data = train, method = \"class\")\n\n# Visualize the tree\n\nlibrary(rpart.plot) rpart.plot(model)\n\n# Predictions\n\npredictions \\<- predict(model, newdata = test, type = \"class\")\n\n# Confusion matrix\n\nlibrary(caret) confusion_matrix \\<- confusionMatrix(predictions, as.factor(test\\$churn)) print(confusion_matrix)\n\n# Performance metrics\n\nconfusion \\<- confusion_matrix\\$table TP \\<- confusion\\[2, 2\\] TN \\<- confusion\\[1, 1\\] FP \\<- confusion\\[1, 2\\] FN \\<- confusion\\[2, 1\\]\n\naccuracy \\<- (TP + TN) / (TP + TN + FP + FN) precision \\<- TP / (TP + FP) recall \\<- TP / (TP + FN) f1_score \\<- 2 \\* (precision \\* recall) / (precision + recall) specificity \\<- TN / (TN + FP)\n\ncat(\"Accuracy:\", accuracy, \"\\n\") cat(\"Precision:\", precision, \"\\n\") cat(\"Recall:\", recall, \"\\n\") cat(\"F1 Score:\", f1_score, \"\\n\") cat(\"Specificity:\", specificity, \"\\n\")\\`\n\n### 6. Conclusion\n\nClassification trees are intuitive and powerful tools for binary classification problems. They provide a clear visual representation of decision rules, making them easy to interpret.\n",
    "supporting": [
      "w12_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}