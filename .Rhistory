renv::restore()
getwd()
setwd("~/Documents/Work/Teaching/ETF3231/2024/Assignments/Solution/GA2")
log(NA)
log(0)
log(-1)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
#*******************
# 01. Setup ----
#*******************
setwd("~/Documents/Teaching/Honours/Tissa/18 Oct 23")
setwd("~/Documents/Work/Teaching/Honours/Tissa/18 Oct 23")
library(tidyverse)
library(glmnet)
install.packages("emo")
devtools::install_github("hadley/emo")
library(emo)
setwd("~/Downloads")
# Generate a positively skewed variable
set.seed(123)
skewed_var <- rexp(1000, rate = 1)  # Exponential distribution is positively skewed
# Calculate the mean and standard deviation
mean_skewed <- mean(skewed_var)
sd_skewed <- sd(skewed_var)
# Standardize the variable
standardized_var <- (skewed_var - mean_skewed) / sd_skewed
# Check the mean and standard deviation of the standardized variable
mean_standardized <- mean(standardized_var)
sd_standardized <- sd(standardized_var)
# Output the results
list(
original_mean = mean_skewed,
original_sd = sd_skewed,
standardized_mean = mean_standardized,
standardized_sd = sd_standardized
)
plot(standardized_var)
hist(standardized_var)
hist(skewed_var)
install.packages("countdown")
install.packages("rpart.plot")
install.packages("MASS
")
install.packages("MASS")
renv::repair()
bookdown:::mathquill()
source("~/.active-rstudio-document", echo=TRUE)
setwd("~/Documents/Work/Teaching/ETF2121/slides")
#| include: false
library(countdown)
library(emo)
knitr::opts_chunk$set(
fig.width = 6,
fig.asp = 0.618,
fig.align = "center",
out.width = "90%"
)
library(knitr)
unique(mtcars$carb)
#| setup
knitr::opts_chunk(echo = TRUE)
#| setup
knitr::opts_chunk$sets(echo = TRUE)
#| setup
knitr::opts_chunk$set(echo = TRUE)
# Load package
library(tidyverse)
library(readxl)
data <- read_xlsx("data/heavenlychocolates.xlsx")
setwd("~/Documents/Work/Teaching/ETF2121/tutorials")
data <- read_xlsx("data/heavenlychocolates.xlsx")
data <- read_xlsx("data/heavenlychocolates.xlsx")
summary(data)
hist(data$`Time (min)`)
data <- read_xlsx("data/heavenlychocolates.xlsx")
summary(data)
hist(data$`Time (min)`)
data$Day <- factor(data$Day, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
summary(data$Day)
data <- read_csv("data/heavenlychocolates.csv")
summary(data)
hist(data$`Time (min)`)
data$Day <- factor(data$Day, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
summary(data$Day)
data <- read_csv("data/heavenlychocolates.csv")
summary(data)
hist(data$`Time (min)`)
data$Day <- factor(data$Day, levels = c("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"))
summary(data$Day)
data$Browser <- factor(data$Browser, levels = c("Chrome", "Firefox", "Other"))
table(data$Browser)
plot(data$`Time (min)`, data$`Amount Spent`, xlab = "Time (min)", ylab = "Amount Spent")
cor(data$`Time (min)`, data$`Amount Spent`)
plot(data$`Time (min)`, data$`Amount Spent (($)`, xlab = "Time (min)", ylab = "Amount Spent")
cor(data$`Time (min)`, data$`Amount Spent ($)`)
plot(data$`Pages Viewed`, data$`Amount Spent ($)`, xlab = "Pages Viewed", ylab = "Amount Spent")
cor(data$`Pages Viewed`, data$`Amount Spent ($)`)
plot(data$`Time (min)`, data$`Pages Viewed`, xlab = "Time (min)", ylab = "Pages Viewed")
cor(data$`Time (min)`, data$`Pages Viewed`)
5+6
setwd("~/Documents/Work/Teaching/ETF2121/tutorials")
knitr::opts_chunk$set(include = params$solutions) # set to TRUE for solutions document
# Enter the data
without_wait_tracking <- c(24, 67, 17, 20, 31, 44, 12, 23, 16, 37)
with_wait_tracking <- c(31, 11, 14, 18, 12, 37, 9, 13, 12, 15)
boxplot(without_wait_tracking,
main = "Patient Wait Times Without Wait-Tracking System",
ylab = "Wait Time (minutes)")
boxplot(with_wait_tracking,
main = "Patient Wait Times With Wait-Tracking System",
ylab = "Wait Time (minutes)")
par(mfrow = c(1,2))
boxplot(without_wait_tracking,
main = "Patient Wait Times Without Wait-Tracking System",
ylab = "Wait Time (minutes)")
boxplot(with_wait_tracking,
main = "Patient Wait Times With Wait-Tracking System",
ylab = "Wait Time (minutes)")
# Create geometric mean function
geometric_mean <- function(end, start, n) {
gm <- (end - start)/start^(1/n)
return(gm)
}
geometric_mean(63000, 19000, 10)
geometric_mean(19000, 63000, 10)
geometric_mean <- function(end, start, n) {
gm <- ((end - start)/start)^(1/n)
return(gm)
}
geometric_mean(19000, 63000, 10)
# Create geometric mean function
geometric_mean <- function(end, start, n) {
gm <- (start/end)^(1/n)
return(gm)
}
geometric_mean(19000, 63000, 10)
# Create geometric mean function
geometric_mean <- function(end, start, n) {
gm <- (end/start)^(1/n)
return(gm)
}
geometric_mean(19000, 63000, 10)
source("~/.active-rstudio-document", echo=TRUE)
geometric_mean(19000, 3334, 18)
geometric_mean(3334, 19000, 18)
geometric_mean(2285, 3334, 18)
geometric_mean(3334, 2285, 18)
geometric_mean(3334, 2285, 5)
geometric_mean(2285, 3334, 5)
elephant_data <- read.csv("data/elephant_data.csv")
setwd("~/Documents/Work/Teaching/ETF2121/tutorials")
elephant_data <- read.csv("data/elephant.csv")
elephant_data <- read.csv("data/elephant.csv")
boxplot(elephant_data$X1979, elephant_data$X1989, elephant_data$X2007, elephant_data$X2012,
names = c("1979", "1989", "2007", "2012"),
xlab = "Year", ylab = "Elephant Population",
main = "Elephant Population by Year")
library(tidyverse)
elephant_data_long <- elephant_data %>%
pivot_longer(cols = c(X1979, X1989, X2007, X2012),
names_to = "year",
values_to = "population")
head(elephant_data_long)
library(tidyverse)
elephant_data_long <- elephant_data %>%
pivot_longer(cols = c(X1979, X1989, X2007, X2012),
names_to = "year",
values_to = "population")
head(elephant_data_long)
boxplot(population ~ year, data = elephant_data_long,
xlab = "Year", ylab = "Elephant Population",
main = "Elephant Population by Year")
library(tidyverse)
elephant_data_long <- elephant_data %>%
pivot_longer(cols = c(X1979, X1989, X2007, X2012),
names_to = "year",
values_to = "population")
head(elephant_data_long)
boxplot(elephant_data_long$population ~ elephant_data_long$year, data = elephant_data_long,
xlab = "Year", ylab = "Elephant Population",
main = "Elephant Population by Year")
library(tidyverse)
elephant_data_long <- elephant_data %>%
pivot_longer(cols = c(X1979, X1989, X2007, X2012),
names_to = "year",
values_to = "population")
head(elephant_data_long)
boxplot(population ~ year, data = elephant_data_long,
xlab = "Year", ylab = "Elephant Population",
main = "Elephant Population by Year")
library(tidyverse)
elephant_data_long <- elephant_data %>%
pivot_longer(cols = c(X1979, X1989, X2007, X2012),
names_to = "year",
values_to = "population")
head(elephant_data_long)
boxplot(population ~ year, data = elephant_data_long,
xlab = "Year", ylab = "Elephant Population",
main = "Elephant Population by Year")
boxplot(population ~ as.factor(year), data = elephant_data_long,
xlab = "Year", ylab = "Elephant Population",
main = "Elephant Population by Year")
library(tidyverse)
elephant_data <- read_csv("data/elephant.csv")
elephant_data_long <- elephant_data %>%
pivot_longer(cols = c(X1979, X1989, X2007, X2012),
names_to = "year",
values_to = "population")
elephant_data_long <- elephant_data %>%
pivot_longer(cols = c(`1979`, `1989`, `2007`, `2012`),
names_to = "year",
values_to = "population")
head(elephant_data_long)
boxplot(population ~ as.factor(year),
data = elephant_data_long,
xlab = "Year", ylab = "Elephant Population",
main = "Elephant Population by Year")
View(elephant_data)
#| label: setup
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Load package
library(tidyverse)
# Calculate geometric mean for each country
elephant_data <- elephant_data %>%
mutate(geometric_mean = geometric_mean(`1989`, `1979`, 10))
elephant_data
# Calculate geometric mean for each country
elephant_data <- elephant_data %>%
mutate(geometric_mean_18 = geometric_mean(`2007`, `1989`, 18))
elephant_data
# Calculate geometric mean for each country
elephant_data <- elephant_data %>%
mutate(geometric_mean_5 = geometric_mean(`2012`, `2007`, 5))
elephant_data
#| label: setup
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
mean_sleep <- 6.9
sd_sleep <- 1.2
z_4.5 <- (4.5 - mean_sleep) / sd_sleep
z_9.3 <- (9.3 - mean_sleep) / sd_sleep
p <- pnorm(z_9.3)- pnorm(z_4.5)
p
z_8 <- (8 - mean_sleep) / sd_sleep
z_8
#| include: false
library(countdown)
library(ggplot2)
knitr::opts_chunk$set(
fig.width = 8,
fig.asp = 0.618,
fig.retina = 3,
dpi = 300,
out.width = "80%",
fig.align = "center"
)
knitr::asis_output("\n\n---\n\n")
options(scipen = 100)
1 - exp(-18/15) - (1 - exp(-6/15))
# Calculate the probability
pexp(18, rate = 1/15) - pexp(6, rate = 1/15)
# Draw poisson distribution using different means
x <- 0:20
y1 <- dpois(x, lambda = 2)
y2 <- dpois(x, lambda = 5)
y3 <- dpois(x, lambda = 10)
# Plot
plot(x, y1, type = "h", lwd = 2, col = "blue", xlab = "Number of Occurrences", ylab = "Probability", main = "Poisson Distribution")
lines(x, y2, type = "h", lwd = 2, col = "red")
lines(x, y3, type = "h", lwd = 2, col = "green")
legend("topright", legend = c("lambda = 2", "lambda = 5", "lambda = 10"), fill = c("blue", "red", "green"))
# Draw poisson distribution using different means
library(ggplot2)
# Define lambda values and range for x
lambdas <- c(1, 4, 7)
x <- 0:20
# Create a data frame to store the values
poisson_data <- data.frame(
x = rep(x, times = length(lambdas)),
lambda = factor(rep(lambdas, each = length(x))),
probability = unlist(lapply(lambdas, function(lam) dpois(x, lam)))
)
# Plot using ggplot2
ggplot(poisson_data, aes(x = x, y = probability, color = lambda)) +
geom_line() +
geom_point() +
labs(title = "Poisson Distribution for Different λ Values",
x = "x",
y = "Probability Mass Function (PMF)",
color = "Lambda (λ)") +
theme_minimal()
n<-800
p<-0.02
lambda <-n*p
ppois(0, lambda=16, lower = TRUE)
# a
n<-800
p<-0.02
lambda <-n*p
ppois(0, lambda=16, lower = TRUE)
# b
ppois(1, lambda=16)- ppois(0, lambda=16)
# c
ppois(2, lambda=16) - ppois(1, lambda=16)
# d
ppois(3, lambda=16, lower = FALSE)
# no sales
dbinom(0 , 30, 0.25)
# 5 sales
dbinom(5, 30, 0.25)
# more than 4 sales
1- (dbim(0, 30, 0.25) + dbinom(1, 30, 0.25) + dbinom(2, 30, 0.25) + dbinom(3, 30, 0.25) + dbinom(4, 30, 0.25))
# no sales
dbinom(0 , 30, 0.25)
# 5 sales
dbinom(5, 30, 0.25)
# more than 4 sales
1- (dbinom(0, 30, 0.25) + dbinom(1, 30, 0.25) + dbinom(2, 30, 0.25) + dbinom(3, 30, 0.25) + dbinom(4, 30, 0.25))
punif(15, min =0 , max = 60)
# Elevator takes less than 15s
punif(15, min =0 , max = 60)
# mean of arrival
min <- 0
max <- 60
mean <- (min + max) / 2
punif(15, min, max)
# Elevator takes less than 15s
punif(15, min =0 , max = 60)
# mean of arrival
min <- 0
max <- 60
mean <- (min + max) / 2
punif(15, min = min, max= max)
# Elevator takes less than 15s
punif(15, min =0 , max = 60)
# mean of arrival
min <- 0
max <- 60
mean <- (min + max) / 2
mean
punif(15, min = min, max= max)
# Elevator takes less than 15s
punif(15, min =0 , max = 60)
# mean of arrival
min <- 0
max <- 60
mean <- (min + max) / 2
mean
# standard deviation
var_x <- ((max-min)**2))/12
# Elevator takes less than 15s
punif(15, min =0 , max = 60)
# mean of arrival
min <- 0
max <- 60
mean <- (min + max) / 2
mean
# standard deviation
var_x <- ((max-min)**2)/12
sqrt(var_x)
pnorm(40000, mean=36500, sd=5000, lower.tail=FALSE)
# (a)
pnorm(40000, mean=36500, sd=5000, lower.tail=FALSE)
# (b)
p <- 0.10
qnorm(p, mean=36500, sd=5000)
# Random Sampling
set.seed(123)
sample(1:10, 5)
# Urn contains one blue, one green and one yellow balls
Urn = c('blue', 'green', 'yellow')
sample(x = Urn, size =2, replace = TRUE)
sample(x = Urn, size =2, replace = FALSE)
renv::repair()
#| label: setup
#| echo: false
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
elephant_data_long <- elephant_data %>%
select(`1979`, `1989`, `2007`, `2012`) %>%
boxplot(xlab = "Year", ylab = "Elephant Population",
main = "Elephant Population by Year")
# Calculate geometric mean for each country
elephant_data <- elephant_data %>%
mutate(geometric_mean_5 = (geometric_mean(`2012`, `2007`, 5)-1)*100)
library(tidyverse)
elephant_data <- read_csv("data/elephant.csv")
